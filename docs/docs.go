// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/dashboard/uniswap-log": {
            "post": {
                "description": "Update Uniswap USDC/ETH pair swap log",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dashboard"
                ],
                "summary": "Update Uniswap USDC/ETH pair swap log",
                "parameters": [
                    {
                        "description": "Uniswap USDC/ETH pair request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UniswapUSDCETHPairBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SuccessMessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/user/tasks": {
            "post": {
                "description": "Get user points history for distributed tasks",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get user points history for distributed tasks",
                "parameters": [
                    {
                        "description": "User tasks request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserTasksBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UserTasksResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/user/tasks/{address}": {
            "get": {
                "description": "Get user tasks status by address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get user tasks status by address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Wallet address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UserStatusResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        }
    },
    "definitions": {
        "SuccessMessageResponse": {
            "description": "Success message response for 200",
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "name": {
                    "type": "string",
                    "example": "SUCCESS"
                }
            }
        },
        "UniswapUSDCETHPairBody": {
            "description": "Uniswap USDC/ETH pair request body",
            "type": "object",
            "required": [
                "endBlockNumber",
                "startBlockNumber"
            ],
            "properties": {
                "endBlockNumber": {
                    "type": "integer",
                    "example": 20358617
                },
                "startBlockNumber": {
                    "type": "integer",
                    "example": 20300000
                }
            }
        },
        "UserStatusResponse": {
            "description": "User status response",
            "type": "object",
            "properties": {
                "createTime": {
                    "type": "string",
                    "example": "2024-07-02T00:00:00Z"
                },
                "points": {
                    "type": "integer",
                    "example": 100
                },
                "status": {
                    "type": "string",
                    "example": "completed"
                },
                "taskDescription": {
                    "type": "string",
                    "example": "The user needs to swap at least 1000u"
                },
                "taskEndTime": {
                    "type": "string",
                    "example": "2024-07-29T00:00:00Z"
                },
                "taskName": {
                    "type": "string",
                    "example": "Onboarding Task"
                },
                "taskStartTime": {
                    "type": "string",
                    "example": "2024-07-01T00:00:00Z"
                },
                "totalAmount": {
                    "type": "integer",
                    "example": 100
                },
                "updateTime": {
                    "type": "string",
                    "example": "2024-07-02T00:00:00Z"
                },
                "walletAddress": {
                    "type": "string",
                    "example": "0x1234.."
                }
            }
        },
        "UserTasksBody": {
            "description": "User tasks request body",
            "type": "object",
            "required": [
                "walletAddress"
            ],
            "properties": {
                "walletAddress": {
                    "type": "string",
                    "example": "0x1234.."
                }
            }
        },
        "UserTasksResponse": {
            "description": "User tasks response",
            "type": "object",
            "properties": {
                "points": {
                    "type": "integer",
                    "example": 100
                },
                "taskDescription": {
                    "type": "string",
                    "example": "The user needs to swap at least 1000u"
                },
                "taskName": {
                    "type": "string",
                    "example": "Onboarding Task"
                },
                "updateTime": {
                    "type": "string",
                    "example": "2024-07-02T00:00:00Z"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "HW0720",
	Description:      "HW0720",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
